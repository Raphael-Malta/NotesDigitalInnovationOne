Um problema de produtividade começou a ser notado no desenvolvimento de aplicações Web Java.
Os desenvolvedores perceberam que a maior parte do tempo era gasto com queries SQL através do JDBC.

Um outro problema percebido era a mudança de paradigma. A programação orientada a objetos(ex: Java)
é diferente do esquema entidade relacioanl(ex: SGBDs tradicionais), sendo necessário esquematizar os dois modelos
para um mesmo sistema.

Como solução para esses 2 problemas, foi proposto um modelo de mapeamento chamado Mapeamento Objeto Relacional(ORM)
para representar tabelas de um banco de dados relacional através de classes java.


Exemplo de mapeamentos:

Tabela <--> Classe
Coluna <--> Atributo
Registro <--> Objeto

Para padronizar as interfaces das implementações ORM (mapeamento objeto relacional) foi criada uma especificação 
oficial chamada JPA (ou Java Persistence API). Ela descreve como deve ser o comportamento dos frameworks Java ORM
que desejarem implementar a sua especificação.

Logo Somente com a especificação JPA não será possivel executar operações entre a aplicação e o banco de dados.

Apesar de ser somente a especificação, o JPA possui algumas classes, interfaces e anotações que ajudam o desenvolvedor
a abstrair o código.

Esses artefatos estão presentes no pacote javax,persistence que ajudam a maneter o código independente da 
implementação utilizada.
Lembrando que para persistir dados com JPA, é preciso escolher uma implementação que irá executar todo trabalho.

Entre os principais artefatos dos JPA, podem ser destacados:
Anotação @Entity - Indica a aplicação que os objetos da classe especificada serão persistidos no banco de dados.
Também podem ser utilizadas outras anotações para auxiliar no mapeamento de classe, tais como:
@id, @columnm, @table, @OneToMany e @ManyToOne.

Interface EntityManager - É utilizada para gerenciar o ciclo de vida das entidades. Os principais métodos utilizados
são: find, persist e remove.


As pincipais anotações utilizadas junto com a annotation @Entity são:

@Table - é Uma annotation opcional. Por padrão o nome da entidade é usado para realizar o mapeamento com o nome da
tabela do banco de dados. Essa annotation será necessária caso o nome da entidade seja diferente do nome da tablea
no banco de dados.

@Column - É uma annotation opcional. Por padrão o atributo da entidade é usado para realizar o mapeamento com nome
da coluna do banco de dados. Essa annotation será necessária caso os atributos da entidade sejam diferentes das 
colunas do banco de dados.

@Id - É obrigatório especificar ao menos uma ID para a entidade.



Também existem as annotations de relacionamento que são utilizadas para representar os relacionamentos entre
tabelas do banco de dados(através das chaves estranheiras no banco de dados) em uma aplicação que esteja utilizando
JPA. As principais annotations são @ManyToManty, @ManyToOne, @OneToMany e @OneToOne.

Na aplicação utilizando JPA, é possível realizar relacionamento unidirecionais e bidirecionais.
Na unidirecional é possivel chegar de uma instância A para uma instância B facilmente, porém o caminho contrário
é dificultado. Na bidirecional tanto do A para o B, quanto do B para o A o acesso é facilitado.




Nas annotations de relacionamento, a propriedade "fetch" exige atenção especial do desenvolvedor.
Seus possíveis valores são eager(ansioso) ou lazy(preguiçoso). Suas caracteristicas são:

-Eager - A entidade mapeada com esse atributo sempre será carregada na aplicação quando a entidade que está
mapeando for consultada, mesmo que nunca seja utilizada durante a execução da aplicação.

-Lazy - A entidade mapeada com esse atributo somente será carregada na aplicação quando esta for explicitamente
consultada pela entidade que está mapeando (É o mais aconselhável de usar caso não se saiba, em um primeiro momento,
o real número de frequência de consultas).


Para persistir dados com as entidas mapeadas, é obrigatório iniciar uma transação. Para manipular transações, é
necessário utilizar o seguinte métodos do entityManager:

-getTransacation - Retorna uma EntityTransaction, sendo obrigatório o seu uso quando utilizar algum método
que realizae alterações no banco de dados.
Pode utilizar os seguintes métodos:

-begin - Inicia uma transação;
-commit - Finaliza uma transação, persistindo todos os dados que foram modificados desde o inicio da transação;
-rollback - Finaliza uma transação, revertendo todos os dados que foram modificados desde o inicio da transação;

















































